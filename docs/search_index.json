[["index.html", "Data Science from Scratch Code Chapter 1 Computer Set-Up 1.1 Virtual Environment", " Data Science from Scratch Code Joffrey Anthony 2021-10-03 Chapter 1 Computer Set-Up When building projects efficiently, you will need different set-ups in order to have everything in your code work properly, not only on your own machine, but also on other machines, for example of another team-member. 1.1 Virtual Environment Because the libraries you work with in your projects will be updated over time (this is generally bad news, since this will cause all sorts of dependency problems across your libaries you use), it is crucial to understand that you will need a virtual environment (venv). There, you will install all the libraries you need. The major advantage here, is that you can control the version you install the library. Furthermore, you can send the venv to another computer and the people will download exactly the versions of each library. This allows that your code will always work, independently of the machine you will use! There will be no dependency problems anymore, which is a huge win.. :) 1.1.1 Create a venv Go to your terminal and plug in the following code: conda create -n YOUR-VENVIRONMENT-NAME-HERE python=3.6 1.1.2 Activate your newly created venv Weirdly though, you also need to activate the environment you created above. Plug in the following code: source activate YOUR-ENVIRONMENT-NAME Note that the code above can also be used to activate virtual environments you created in the past! =) "],["r-markdown.html", "Chapter 2 R Markdown 2.1 Hide Source Code 2.2 Execute a Code-Chunk without showing any Output 2.3 Do NOT execute a Code-Chunk", " Chapter 2 R Markdown When writing Code, I recommend you to use .Rmd-Documents, which will allow you to combine both, text, as well as Code (in R, Python, or any other language of your choice). Actually, this document is written in .Rmd-Files, where I combine the text, with so-called “code-snippets”, like the follwing: This is a Code-Snippet When writing Code in R-Markdown, it will be useful for you to know when: to execute code wihtin a code-snippet and where not. 2.1 Hide Source Code This will be done with echo = FALSE: ## [1] 2 With figures, you need fig.show = 'hide' in R: plot(cars) To hide warning-messages, just use message = FALSE: message(&quot;You will not see the message.&quot;) 2.2 Execute a Code-Chunk without showing any Output You will get an output, e.g. the code will execute, but you will not show the code. 2.3 Do NOT execute a Code-Chunk If you want to show code for demonstration purposes - like on this Website - you will probably want to only show the code, but not execute it. This is also possible with eval=FALSE: "],["python-libraries.html", "Chapter 3 Python Libraries 3.1 Time-Series Forecasting", " Chapter 3 Python Libraries 3.1 Time-Series Forecasting Here, I will explore different libraries that will allow you to make forecasts into the future. 3.1.1 Facebook Prophet Aus einer didaktischen Perspektive ist die offizielle Dokumentation der Prophet-Library wunderbar, um die Unterschiede zwischen R &amp; Python (Objekt-Orientierte Programmierung) zu entdecken. Link zur offiziellen Dokumentation: https://facebook.github.io/prophet/docs/quick_start.html "],["visualization.html", "Chapter 4 Visualization 4.1 Graphs with Python", " Chapter 4 Visualization When you analyze data, it is crucial to communicate with simplicity what evidence you found. Therefore, this chapter will focus on how to bring your evidence to your audience. 4.1 Graphs with Python When you work with Python, there are three main libraries you need to know: seaborn, which can plot extremely beautiful graphs, without much efforts. matplotlib, for more advanced stuff, this is the library you need to master. plotly, for implementations into websites. 4.1.1 Seaborn 4.1.1.1 Draw a Time-Series (= Line-Chart) A line-chart is often used to visualize a trend in the data over time. import seabron as sns sns.lineplot(data = spotify_data) 4.1.1.2 Draw a Barplot (= Barchart) import seabron as sns sns.barplot(x = data.Racing, y = data.index) 4.1.1.3 Draw a Heatmap import seabron as sns sns.heatmap(data = flight_data, annot = True) 4.1.1.4 Draw a Scatterplot (Streudiagramm // Punktwolke) You can check, whether you have enough variation in your data to predict the dependent variable. 4.1.1.4.1 With 2 variables (incl. regression-line) import seabron as sns sns.scatterplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;]) # include a regression-line: sns.regplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;]) 4.1.1.4.2 With 3 variables, where 2 are continuous &amp; 1 is categorical import seabron as sns sns.scatterplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;], hue = health_data[&#39;smoker&#39;]) # include a regression-line: sns.lmplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;], hue = health_data[&#39;smoker&#39;]) # note that it is not the same, as when you used 2 variables! 4.1.1.5 Draw a Histogram A histogram sorts the data, then it is putting the data into intervalls of data (= batches) and finally counts the frequency those batches occur. Useful to check the distribution of the data 4.1.1.5.1 Discrete Version import seabron as sns sns.distplot( a = iris_data[&#39;Petal Length (cm)&#39;], # a column you would like to plot label = &quot;Rose&quot;, kde = False # &quot;Kernel Density Estimate&quot; (kde): always provide this input when creating a histogram ) 4.1.1.5.2 Continuous Version (Kernel Density Estimate) import seabron as sns ### ---- Standard KDE-Plot sns.kdeplot( data = iris_data[&#39;Petal Length (cm)&#39;], shade = True # colors the area below the curve ) ### ---- 2-Dimensional KDE-Plot, when using more than 1 column sns.jointplot( x = iris_data[&#39;Petal Length (cm)&#39;, y = iris_data[&#39;Septal Width (cm)&#39;], kind = &quot;kde&quot; ) 4.1.1.6 Change Style of different Seaborn-Plots Key:Set the new style BEFORE you run your code for the actual graph! import seabron as sns ### ---- Example for changing the colors // styles with a new style &quot;dark&quot;: sns.set_style(&quot;dark&quot;) # Possibile styles to choose from: {&quot;darkgrid&quot;, &quot;whitegrid&quot;, &quot;dark&quot;, &quot;white&quot;, &quot;ticks&quot;} 4.1.2 Matplotlib 4.1.2.1 Set Width &amp; Height of Graph import matplotlib.pyplot as plt plt.figure(figsize=(10,6)) # 1. width, 2. height 4.1.2.2 Set title of Graph import matplotlib.pyplot as plt plt.title(&#39;Hello World&#39;) 4.1.2.3 Set Label of Axes import matplotlib.pyplot as plt plt.ylabel(&#39;Average Gaming Score&#39;) plt.xlabel(&#39;Date&#39;) 4.1.2.4 Force Legend to appear import matplotlib.pyplot as plt plt.legend() "]]
