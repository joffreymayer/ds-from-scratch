[["index.html", "Data Science from Scratch Code Chapter 1 Computer Set-Up 1.1 Virtual Environment 1.2 R Markdown 1.3 Terminal Commands (in Mac): 1.4 Git &amp; Github:", " Data Science from Scratch Code Joffrey Anthony 2021-10-17 Chapter 1 Computer Set-Up When building projects efficiently, you will need different set-ups in order to have everything in your code work properly, not only on your own machine, but also on other machines, for example of another team-member. 1.1 Virtual Environment Because the libraries you work with in your projects will be updated over time (this is generally bad news, since this will cause all sorts of dependency problems across your libaries you use), it is crucial to understand that you will need a virtual environment (venv). There, you will install all the libraries you need. The major advantage here, is that you can control the version you install the library. Furthermore, you can send the venv to another computer and the people will download exactly the versions of each library. This allows that your code will always work, independently of the machine you will use! There will be no dependency problems anymore, which is a huge win.. :) 1.1.1 Create a venv Go to your terminal and plug in the following code: conda create -n YOUR-VENVIRONMENT-NAME-HERE python=3.6 1.1.2 Activate your newly created venv Weirdly though, you also need to activate the environment you created above. Plug in the following code: source activate YOUR-ENVIRONMENT-NAME Note that the code above can also be used to activate virtual environments you created in the past! =) 1.2 R Markdown When writing Code, I recommend you to use .Rmd-Documents, which will allow you to combine both, text, as well as Code (in R, Python, or any other language of your choice). Actually, this document is written in .Rmd-Files, where I combine the text, with so-called ‚Äúcode-snippets‚Äù, like the follwing: This is a Code-Snippet When writing Code in R-Markdown, it will be useful for you to know when: to execute code wihtin a code-snippet and where not. 1.2.1 Hide Source Code This will be done with echo = FALSE: ## [1] 2 With figures, you need fig.show = 'hide' in R: plot(cars) To hide warning-messages, just use message = FALSE: message(&quot;You will not see the message.&quot;) 1.2.2 Execute a Code-Chunk without showing any Output You will get an output, e.g. the code will execute, but you will not show the code. 1.2.3 Do NOT execute a Code-Chunk If you want to show code for demonstration purposes - like on this Website - you will probably want to only show the code, but not execute it. This is also possible with eval=FALSE: 1.3 Terminal Commands (in Mac): clear = clears the terminal cd = change directory cd .. = go back one directory pwd = print working directory ls = prints all the child-directories (= one layer deeper of the path) from the parent-directory (= current directory you are in with your terminal) you are currently in. dir = this is the same command as ls but dir is for Windows. pwd = print working directory open . = opens the current directory you are in commit = save hash = unique identifier in the history of files (‚Äì&gt; it is a huge string composed of characters (= Buchstaben) &amp; numbers) Trick #1 : hit the ‚ÄúTab-Taste‚Äù == will automatically auto-fill the name of the file / directories etc. Example : Type cd Dok + ‚ÄúTab‚Äù-Taste ‚Äì&gt; auto-fill activates ‚Äì&gt; im Terminal steht dann der automatisch ausgef√ºllte Name des Files / Directories, zum Beispiel cd Dokumente bzw. cd Name_Of_Child_Directory Trick #2 : How to find a path of a directory that is situated very deeply in your local computer? Example : Type cd + drag-&amp;-drop the folder that is deep in your computer with the file in it. 1.4 Git &amp; Github: pull request = ‚ÄúTake some changes from a particular branch and bring it into another branch.‚Äù Achtung : es ist eine Request, es wurde noch nichts gemerged! F√ºr das brauch es noch merge als zus√§tzlichen Befehl. fork a repo = ‚ÄúTake someone else‚Äôs repo - because you love it üòä - and put it into your own list of repos, in order to be able to edit it yourself without affectig the original repository of the owner.‚Äù How to tell the original owner you want to merge your changes that you made back into their orignal repo and implement them those changes into their original work // repo? Look at the youtube video from Coding Train ab 9:35-11:50 To see how to refer to issues &amp; bugs in your code directly via your commit-command, look at the youtube video ab 6:35-7:40 and to diretly close issues, because you resolved it, look look at the youtube video ab 7:40-8:55. What is a remote? A remote is a duplicate instance of your repository (on your local computer) that lives somewhere else on a remote server (like Github). 1.4.1 First time using Git &amp; Github There are specific Git-commands that you need to know, when you begin to start to work with Git and Gibthun for the first time. Note that all these Git-commands need to be typed within the Terminal on your local computer. git config --list = Sehr wichtig, wenn du Git zum ersten Mal via einem neuen Computer runst! Dieser Befehl zeigt dir, welchen Username &amp; Email du aktuell verwendest (schaue bei user.name &amp; user.email, ob es deine Github Anmelde-Daten sind). Es ist key - insbesondere, wenn du neu mit Git beginnst - dass diese Parameter mit deinen Github Anmelde-Daten √ºbereinstimmen! Ansonsten musst du immer git clone machen und die √§ltere Version in einen ‚Äúalt‚Äù-Ordner tun, was extrem m√ºhsam ist. Wenn du noch keinen user.name hast, dann gebe folgenden Code in die Command-Line ein: git config --global user.name 'Dein_Github_UserName'. Beachte : Schreibe den Namen mit die Anf√ºhrungszeichen! Wenn du noch keinen user.name hast, dann gebe folgenden Code in die Command-Line ein: git config --global user.name 'deineEmail@email.ch'. Beachte : Schreibe die Email ohne die Anf√ºhrungszeichen! Check if it worked ?: Gebe wieder den Befehl git config --list und schaue bei user.name &amp; user.email, ob dort deine Github Anmelde-Daten √ºbernommen wurden. git push = this is the act of sending to Github. git pull = this is the act of receiving from Github. 1.4.2 2 Key concepts in Git Before starting to work with Git, you need to understand that there are 2 ways of starting a project: 1) Create a `remote` repository on Github and then `cloning` it - via Git - on your local computer to work from there. 2) Creating a repository `locally` on your computer and then - aftre a few months working on this repository - adding it to Github. Depending on which of those 2 different ways you choose to start a project (create a repo right from the get-go on Github VS. work locally and then - after some time - push everything to Github), the Git-Commands will slightly differ. 1.4.2.1 Start Project via Github (remote-possibility) What are the Git-Commands, if you start your project directly by creating a Repo on Github (= possibility 1) above)? git clone https://github.com/joffreymayer/tageb.git == Will clone your remote directory tageb - which is currently on Github on your local computer, which is simpler // more comfy when working on projects =) git status = Assume that you worked on &amp; modified a file on your local computer that you previously had on Github (you cloned the directory with the file in it on your local computer). With the command git status, Git will check whether there is any changes between your local files VS. the files in the remote directory on the Github-Server // -Website. git commit -a -m \"Test comment for a commit\" = If you changed a file locally and you are happy with your results, you will need to make a commit (= save) and add all files (= this is why we have an input // argument -a; the concept of adding will be explored in the chapter below, where you want to put a local repo into Github after a few months) and you also want to document, what exactly you modified, if you need to go back to a previous version of your file (= this is why we have an input // argument -m \"comment is here...\"). git push origin master = If you have done some changes locally on your file, you can now push everything on the Github-Website. git log = see, locally, the history of your git commits. Achtung : When running this command, you might - accidentally - run into a dangerous environment called VIM, which is a terminal-based text-editor. The problem when you are in VIM, is that you might not be able to get out of it. -Solution: To get out of VIM, just type in :q and you will get out of it. git remote -v = This will tell you which URL is the remote on which your repository is hosted. Merke : The URL of your repo is assigned to the variable origin in Git. 1.4.2.2 Start Project via local computer (local-possibility) What commands do you need, when you decide - after a few months working locally on your computer - to put everything on Github (= possibility 2)? git init == To get started, you need to go to your repository with your terminal - e.g. set the working directory with cd Joffrey\\dokumente\\my_project) first - and, then, transform your repository to a Git-Repository by just typing git init into your terminal. git add single_file.txt == After you initialized your repository, you will have an empty git-repository. Git will not track the files in your repository (= untracked files), unless you explicitly point them out via the git add command. If you want to add all files quickly // simultanoeusly : git add . F√ºr genauere Theorie // Erkl√§rung dahinter : Siehe Youtube-Video Coding Train ab 2:10-6:03 git commit -m \"Adding a new comment for my commit\": After having pointed out to Git, which files he needs to track, you can do a commit of the changes of the files you modified, like in possibility 1). Achtung, es gibt einen kleinen Unterschied zu possibility 1) : das -a (siehe oben) ist verschwunden, weil wir hier add und commit als zwei separate Schritte betrachten. git remote add origin https://github.com/joffreymayer/new-repo = Because our repository is still currently not on Github, we first need to go on the Github Website and create an empty repository. After having done this, you need to tell Git - with the command git remote add origin + copy-pasting the URL ‚Äúhttps://github.com/joffreymayer/new-repo‚Äù - that this is our local Check if it worked : Type the following into the Terminal git remote -v. It should output the variable name - usually called origin - Note if you want to be fancy : Within git remote add origin, the name origin can be changed to any word you like. This is just the variable name in which your Github-URL will be stored. If there is already a remote with the default name origin but you don‚Äôt like the name, you can change the name by: git remote remove origin ‚Äì&gt; this will delete the remote git remote -v ‚Äì&gt; just to check if step 1) worked ‚Äì&gt; should not output anything git remote add noob https:\\\\github.com\\project-1 ‚Äì&gt; now, re-name the remote and call it noob git push origin master == Finally, you will be able to put all your files into the freshly made remote-repository on Github. git pull origin master == Assume that you did changes remotly on Github but not yet locally on your computer. This does not matter, since you can just enter the command git pull origin master to be able to retrieve the changes that you did remotly on Github onto your local computer =) 1.4.2.3 Working with Branches Tutorial for branches? Look at youtube-videos from Coding Train. git branch new_branch == this will create a branch locally on your computer git checkout new_branch == this will tell Git: ‚Äúah, he wants to go into the branch called ‚Äònew_branch‚Äô‚Äù. git branch == this will give you a list of all the branches you ave created locally. Furthermore, it will tell you on which branch you currently work on. How to merge the changes you made on a separate branch to the master-branch (= main branch)? git branch new_branch == this will create a branch called new_branch locally on your computer. git checkout new_branch == You will tell Git: ‚ÄúI now want to work on this newly created branch called ‚Äònew_branch‚Äô‚Äù. git checkout master == After you are happy with the changes you did in new_branch you will need to prepare for the merging by switching to your main-branch, which is the master-branch. git merge new_branch == Since you currently are in the master-branch, Git will know that you want to merge new_branch into the master-branch. That was it üòé "],["python-libraries.html", "Chapter 2 Python Libraries 2.1 Time-Series Forecasting", " Chapter 2 Python Libraries 2.1 Time-Series Forecasting Here, I will explore different libraries that will allow you to make forecasts into the future. 2.1.1 Facebook Prophet Aus einer didaktischen Perspektive ist die offizielle Dokumentation der Prophet-Library wunderbar, um die Unterschiede zwischen R &amp; Python (Objekt-Orientierte Programmierung) zu entdecken. Link zur offiziellen Dokumentation: https://facebook.github.io/prophet/docs/quick_start.html "],["visualization.html", "Chapter 3 Visualization 3.1 Graphs with Python", " Chapter 3 Visualization When you analyze data, it is crucial to communicate with simplicity what evidence you found. Therefore, this chapter will focus on how to bring your evidence to your audience. 3.1 Graphs with Python When you work with Python, there are three main libraries you need to know: seaborn, which can plot extremely beautiful graphs, without much efforts. matplotlib, for more advanced stuff, this is the library you need to master. plotly, for implementations into websites. Noob. 3.1.1 Seaborn 3.1.1.1 Draw a Time-Series (= Line-Chart) A line-chart is often used to visualize a trend in the data over time. import seabron as sns sns.lineplot(data = spotify_data) 3.1.1.2 Draw a Barplot (= Barchart) import seabron as sns sns.barplot(x = data.Racing, y = data.index) 3.1.1.3 Draw a Heatmap import seabron as sns sns.heatmap(data = flight_data, annot = True) 3.1.1.4 Draw a Scatterplot (Streudiagramm // Punktwolke) You can check, whether you have enough variation in your data to predict the dependent variable. 3.1.1.4.1 With 2 variables (incl. regression-line) import seabron as sns sns.scatterplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;]) # include a regression-line: sns.regplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;]) 3.1.1.4.2 With 3 variables, where 2 are continuous &amp; 1 is categorical import seabron as sns sns.scatterplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;], hue = health_data[&#39;smoker&#39;]) # include a regression-line: sns.lmplot(x = health_data[&#39;bmi&#39;], y = health_data[&#39;life_expectancy&#39;], hue = health_data[&#39;smoker&#39;]) # note that it is not the same, as when you used 2 variables! 3.1.1.5 Draw a Histogram A histogram sorts the data, then it is putting the data into intervalls of data (= batches) and finally counts the frequency those batches occur. Useful to check the distribution of the data 3.1.1.5.1 Discrete Version import seabron as sns sns.distplot( a = iris_data[&#39;Petal Length (cm)&#39;], # a column you would like to plot label = &quot;Rose&quot;, kde = False # &quot;Kernel Density Estimate&quot; (kde): always provide this input when creating a histogram ) 3.1.1.5.2 Continuous Version (Kernel Density Estimate) import seabron as sns ### ---- Standard KDE-Plot sns.kdeplot( data = iris_data[&#39;Petal Length (cm)&#39;], shade = True # colors the area below the curve ) ### ---- 2-Dimensional KDE-Plot, when using more than 1 column sns.jointplot( x = iris_data[&#39;Petal Length (cm)&#39;, y = iris_data[&#39;Septal Width (cm)&#39;], kind = &quot;kde&quot; ) 3.1.1.6 Change Style of different Seaborn-Plots Key:Set the new style BEFORE you run your code for the actual graph! import seabron as sns ### ---- Example for changing the colors // styles with a new style &quot;dark&quot;: sns.set_style(&quot;dark&quot;) # Possibile styles to choose from: {&quot;darkgrid&quot;, &quot;whitegrid&quot;, &quot;dark&quot;, &quot;white&quot;, &quot;ticks&quot;} 3.1.2 Matplotlib 3.1.2.1 Set Width &amp; Height of Graph import matplotlib.pyplot as plt plt.figure(figsize=(10,6)) # 1. width, 2. height 3.1.2.2 Set title of Graph import matplotlib.pyplot as plt plt.title(&#39;Hello World&#39;) 3.1.2.3 Set Label of Axes import matplotlib.pyplot as plt plt.ylabel(&#39;Average Gaming Score&#39;) plt.xlabel(&#39;Date&#39;) 3.1.2.4 Force Legend to appear import matplotlib.pyplot as plt plt.legend() "]]
